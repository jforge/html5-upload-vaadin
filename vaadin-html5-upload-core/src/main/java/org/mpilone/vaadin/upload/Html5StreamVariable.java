
package org.mpilone.vaadin.upload;

import java.util.Collection;

import com.vaadin.server.StreamVariable;

/**
 * An extension of the {@link StreamVariable} that supports HTML5 upload
 * concepts including access to the upload parameters and a custom response code
 * and content.
 *
 * @author mpilone
 */
public interface Html5StreamVariable extends StreamVariable {

  /**
   * The response information that can be optionally generated by an upload
   * component. Some client side upload libraries require JSON responses or
   * specific HTTP error codes to indicate the success or failure of chunks.
   * Sending the proper response information is important to enable retry
   * support and to prevent data corruption.
   */
  class UploadResponse {

    private final int statusCode;
    private final String contentType;
    private final String content;

    /**
     * Constructs the response with an HTTP status code, content type, and
     * content.
     *
     * @param statusCode the HTTP status code
     * @param contentType the content type of the response as required by the
     * client side library
     * @param content the content of the response which may be a JSON message
     */
    public UploadResponse(int statusCode, String contentType, String content) {
      this.statusCode = statusCode;
      this.contentType = contentType;
      this.content = content;
    }

    /**
     * Returns the content of the response which may be a JSON message used to
     * relay status information to the upload component.
     *
     * @return the content
     */
    public String getContent() {
      return content;
    }

    /**
     * Returns the content type of the response which is commonly defined by the
     * client side library to work around browser and JavaScript limitations.
     *
     * @return the content type such as "text/plain"
     */
    public String getContentType() {
      return contentType;
    }

    /**
     * The HTTP status code of the response.
     *
     * @return the status code such as 200
     */
    public int getStatusCode() {
      return statusCode;
    }
  }

  /**
   * An extension of the default {@link StreamingStartEvent} that provides
   * access to the HTTP parameters that were submitted with the request. The
   * parameters include both the form fields in a multi-part POST and any URL
   * parameters. This information is commonly required for HTML5 uploads because
   * the client library will encode chunk, retry, and file size information as
   * parameters as the upload may span multiple multi-part requests.
   */
  interface Html5StreamingStartEvent extends StreamingStartEvent {

    /**
     * Returns the first parameter value with the given name or null if the
     * parameter isn't defined.
     *
     * @param name the name of the parameter
     *
     * @return the first parameter value or null
     */
    String getParameterValue(String name);

    /**
     * Returns all the values for the parameter with the given name or null if
     * the parameter isn't defined.
     *
     * @param name the name of the parameter
     *
     * @return the parameter values or null
     */
    Collection<String> getParameterValues(String name);
  }

  /**
   * An extension of the default {@link StreamingEndEvent} that allows the
   * handler to set a custom HTTP response to be sent to the client. This
   * information is commonly required for HTML5 uploads because the client
   * library will parse the response content to determine success or retry
   * status.
   */
  interface Html5StreamingEndEvent extends StreamingEndEvent {

    /**
     * Sets the HTTP response to be written to the client. If not set, the
     * upload handler will generate a default HTTP 200 response.
     *
     * @param response the response information
     */
    void setResponse(UploadResponse response);
  }

  /**
   * An extension of the default {@link StreamingErrorEvent} that allows the
   * handler to set a custom HTTP response to be sent to the client. This
   * information is commonly required for HTML5 uploads because the client
   * library will parse the response content to determine success or retry
   * status.
   */
  interface Html5StreamingErrorEvent extends StreamingErrorEvent {

    /**
     * Sets the HTTP response to be written to the client. If not set, the
     * upload handler will generate a default HTTP 500 response.
     *
     * @param response the response information
     */
    void setResponse(UploadResponse response);
  }
}
